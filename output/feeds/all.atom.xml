<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>RBO</title><link href="https://ryanbutler.online/" rel="alternate"></link><link href="https://ryanbutler.online/feeds/all.atom.xml" rel="self"></link><id>https://ryanbutler.online/</id><updated>2022-02-10T00:00:00+02:00</updated><entry><title>Moving to fish shell</title><link href="https://ryanbutler.online/moving-to-fish-shell.html" rel="alternate"></link><published>2022-02-10T00:00:00+02:00</published><updated>2022-02-10T00:00:00+02:00</updated><author><name>Ryan Butler</name></author><id>tag:ryanbutler.online,2022-02-10:/moving-to-fish-shell.html</id><summary type="html">&lt;p&gt;Moving to fish shell for a feature rich shell improving productivity.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="screenshot" src="https://ryanbutler.online/images/worachat-sodsri-nCz_ZgnbtaE-unsplash.webp" style="width:100%;"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fishshell.com/"&gt;Fish&lt;/a&gt; (short for Friendly Interactive Shell) is a Unix shell that aims to be
more interactive and user-friendly than other shells such as the Bourne Shell
(sh) or the Bourne Again Shell (bash).&lt;/p&gt;
&lt;h1 id="1-features"&gt;1. Features&lt;/h1&gt;
&lt;p&gt;Some of the features that make Fish more user-friendly include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Syntax highlighting: Fish automatically highlights different parts of the
  command line to make it easier to read and understand.&lt;/li&gt;
&lt;li&gt;Autosuggestions: As you type a command, Fish will suggest possible
  completions based on your history and the contents of your directories.&lt;/li&gt;
&lt;li&gt;Web-based configuration: Fish provides a web-based interface for configuring
  and customizing the shell, which can be accessed by running the fish_config
  command.&lt;/li&gt;
&lt;li&gt;Consistency: Fish has a consistent syntax and naming conventions for its
  commands, which can make it easier to learn and use.&lt;/li&gt;
&lt;li&gt;Fish also includes a number of other features that can be useful for users,
  such as tab completion, history search, and support for plugins and themes.
  It is available for most Unix-like operating systems, including Linux, macOS,
  and BSD.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="2-installation"&gt;2. Installation&lt;/h1&gt;
&lt;p&gt;To install on macOS or Linux using Homebrew(Linuxbrew):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// Install fish using HomeBrew on macOS 
❯ brew install fish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed, enter &lt;code&gt;fish&lt;/code&gt; to start the shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ fish
Welcome to fish, the friendly interactive shell
Type &lt;span class="nb"&gt;help&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; instructions on how to use fish
you@hostname ~&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make fish your default shell, you can add the fish executable, which was
added to your &lt;code&gt;$PATH&lt;/code&gt;, to your &lt;code&gt;/etc/shells&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ which fish
/usr/local/bin/fish

❯ &lt;span class="nb"&gt;echo&lt;/span&gt; /usr/local/bin/fish &lt;span class="p"&gt;|&lt;/span&gt; sudo tee -a /etc/shells
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then change your default shell with the below command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ chsh -s /usr/local/bin/fish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To get familiar with the basics I recommend reading through the official 
&lt;a href="https://fishshell.com/docs/current/tutorial.html"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="3-configuration"&gt;3. Configuration&lt;/h1&gt;
&lt;p&gt;The main configuraton file is &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;. Coming from bash
and zsh I found the &lt;a href="https://fishshell.com/docs/current/fish_for_bash_users.html"&gt;fish for bash
users&lt;/a&gt; reference
really helpfull.&lt;/p&gt;
&lt;p&gt;Below is a snippet from my &lt;code&gt;config.fish&lt;/code&gt; at the time of this article:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# set default editor to Neovim&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -gx EDITOR nvim

&lt;span class="c1"&gt;# set VIM key bindings&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; fish_user_key_bindings
    &lt;span class="nb"&gt;bind&lt;/span&gt; yy fish_clipboard_copy
    &lt;span class="nb"&gt;bind&lt;/span&gt; Y fish_clipboard_copy
    &lt;span class="nb"&gt;bind&lt;/span&gt; p fish_clipboard_paste
end

&lt;span class="c1"&gt;# disable greeting&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; fish_greeting

&lt;span class="c1"&gt;# Set the maximum number of open file descriptors.&lt;/span&gt;
&lt;span class="nb"&gt;ulimit&lt;/span&gt; -n &lt;span class="m"&gt;10240&lt;/span&gt;

&lt;span class="c1"&gt;# Force true-color support on &lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -g fish_term24bit &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# Update $PATH&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -gx PATH bin &lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -gx PATH ~/bin &lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -gx PATH ~/.local/bin &lt;span class="nv"&gt;$PATH&lt;/span&gt;

&lt;span class="c1"&gt;# Add Rust to $PATH&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -U fish_user_paths &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.cargo/bin &lt;span class="nv"&gt;$fish_user_paths&lt;/span&gt;

&lt;span class="c1"&gt;# aliases&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; v &lt;span class="s2"&gt;"nvim"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; vi &lt;span class="s2"&gt;"nvim"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; vim &lt;span class="s2"&gt;"nvim"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; t &lt;span class="s2"&gt;"tmux"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; sf &lt;span class="s2"&gt;"source ~/.config/fish/config.fish"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; tmuxrc &lt;span class="s2"&gt;"vim ~/development/dotfiles/tmux/tmux.conf"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; fishrc &lt;span class="s2"&gt;"vim ~/development/dotfiles/fish/config.fish"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; vimrc &lt;span class="s2"&gt;"vim ~/development/dotfiles/nvim"&lt;/span&gt;

&lt;span class="c1"&gt;# Git&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; gs &lt;span class="s2"&gt;"git status"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; ga &lt;span class="s2"&gt;"git add -A"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; gl &lt;span class="s2"&gt;"git log"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; gd &lt;span class="s2"&gt;"git diff"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; gcm &lt;span class="s2"&gt;"git commit -m"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; gma &lt;span class="s2"&gt;"git commit -am"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; gb &lt;span class="s2"&gt;"git branch"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; gc &lt;span class="s2"&gt;"git checkout"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; gp &lt;span class="s2"&gt;"git push"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; gw &lt;span class="s2"&gt;"git clone --bare"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; gf &lt;span class="s2"&gt;"git fetch --all"&lt;/span&gt;

&lt;span class="c1"&gt;# exa&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; -q exa
  &lt;span class="nb"&gt;alias&lt;/span&gt; ll &lt;span class="s2"&gt;"exa -l -g --icons"&lt;/span&gt;
  &lt;span class="nb"&gt;alias&lt;/span&gt; ls &lt;span class="s2"&gt;"exa --icons"&lt;/span&gt;
  &lt;span class="nb"&gt;alias&lt;/span&gt; lla &lt;span class="s2"&gt;"ll -a"&lt;/span&gt;
  &lt;span class="nb"&gt;alias&lt;/span&gt; tree &lt;span class="s2"&gt;"exa --tree --level 2 --icons --long --all --ignore-glob '.git|node_modules|*.pyc|__pycache__/.DS_Store'"&lt;/span&gt;
end

&lt;span class="c1"&gt;# ASDF&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/opt/asdf/libexec/asdf.fish

&lt;span class="c1"&gt;# Pipx&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -gx PATH &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.local/bin &lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -gx PIPX_DEFAULT_PYTHON &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.asdf/shims/python

&lt;span class="c1"&gt;# fzf&lt;/span&gt;
&lt;span class="c1"&gt;# nav with tab&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; FZF_DEFAULT_OPTS &lt;span class="s2"&gt;"--bind=shift-tab:up,tab:down"&lt;/span&gt;

&lt;span class="c1"&gt;# rosepine&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; FZF_DEFAULT_OPTS &lt;span class="nv"&gt;$FZF_DEFAULT_OPTS&lt;/span&gt;&lt;span class="s2"&gt;" &lt;/span&gt;
&lt;span class="s2"&gt; --color=fg:#e0def4,bg:#2a273f,hl:#6e6a86&lt;/span&gt;
&lt;span class="s2"&gt; --color=fg+:#908caa,bg+:#232136,hl+:#908caa&lt;/span&gt;
&lt;span class="s2"&gt; --color=info:#9ccfd8,prompt:#f6c177,pointer:#c4a7e7&lt;/span&gt;
&lt;span class="s2"&gt; --color=marker:#ea9a97,spinner:#eb6f92,header:#ea9a97"&lt;/span&gt;

&lt;span class="c1"&gt;# zoxide&lt;/span&gt;
zoxide init fish &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt;

&lt;span class="c1"&gt;# Starship prompt&lt;/span&gt;
starship init fish &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Below are screenshots from my &lt;a href="https://github.com/ryanleonbutler/dotfiles"&gt;current terminal
configuration&lt;/a&gt; using Kitty, Fish,
Starship, Exa and a rose-pine colour palette.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="https://ryanbutler.online/images/fish_term_1.webp" style="width:100%;"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="https://ryanbutler.online/images/fish_term_2.webp" style="width:100%;"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="https://ryanbutler.online/images/fish_term_3.webp" style="width:100%;"/&gt;&lt;/p&gt;
&lt;p&gt;It is really easy to move to fish and like that autosuggestions and other
features are built-in. Opening new terminal windows loads instantly with the
prompt ready for action. I hope my article has convinced you to give fish a 
try, I just love it!&lt;/p&gt;</content><category term="Productivity"></category><category term="Tools"></category></entry><entry><title>How to manage Python projects</title><link href="https://ryanbutler.online/how-to-manage-python-projects.html" rel="alternate"></link><published>2022-01-10T00:00:00+02:00</published><updated>2022-01-10T00:00:00+02:00</updated><author><name>Ryan Butler</name></author><id>tag:ryanbutler.online,2022-01-10:/how-to-manage-python-projects.html</id><summary type="html">&lt;p&gt;Have you ever struggled to manage your Python projects? Let's see how Poetry can help manage your Python projects.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="screenshot" src="https://ryanbutler.online/images/joshua-j-cotten-uyKB8ZZApU0-unsplash.webp" style="width:100%;"/&gt;&lt;/p&gt;
&lt;p&gt;From installing different Python versions, creating virtual environments,
installing different libraries and dependencies and creating configuration
files for your project. I have been through this journey a few times, tried
multiple approaches and tools, none which really worked or which I liked.
During 2021, I was listening to a &lt;a href="https://talkpython.fm/episodes/show/314/ask-us-about-modern-python-projects-and-tools"&gt;podcast
episode&lt;/a&gt;
where the hosts were covering a tool called
&lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt;. Some of you might have heard about Poetry
before or even use it already, regardless I will share with you my experience
using Poetry in managing Python projects and how it has made my life so much
simpler. I will also share other tools in this post, which compliment Poetry. I
will also share an example of my workflow when starting a new Python project.
Please follow me on &lt;a href="https://twitter.com/ryanleonbutler"&gt;Twitter&lt;/a&gt; and
&lt;a href="https://www.linkedin.com/in/ryanleonbutler/"&gt;LinkedIn&lt;/a&gt; if you like the content
I am creating or just any Python related questions or questions regarding this
post. Thank you for your support!&lt;/p&gt;
&lt;h1 id="1-what-is-poetry"&gt;1. What is Poetry?&lt;/h1&gt;
&lt;p&gt;Poetry's main goal is dependency management and packaging in Python. The tool
allows you to declare the libraries your project uses and will manage them for
you, either by installing or updating them. It also has a bunch of other
features, which include creating a 'pyproject.toml', creating virtual
environments and publishing a Python application or module to
&lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="2-installation"&gt;2. Installation&lt;/h1&gt;
&lt;p&gt;Just like any other Python package, Poetry can be installed using pip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// Install poetry 
❯ pip install poetry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I recommend using &lt;a href="https://github.com/pypa/pipx"&gt;pipx&lt;/a&gt; in this case. It is
great for installing system wide Python applications in isolation. This avoids
installing Poetry to a specific Python installation or virtual environment. It
also adds the command line application to your system path allowing you to
execute the tool even if other Python virtual environments are active.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// Install pipx and add it to the system path 
❯ brew install pipx 
❯ pipx ensure path
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just a tip on using pipx, if you wish to use a specific Python version in your
pipx environments, I recommend setting an environment variable in your shell
start-up script (e.g. in 'config.fish') to change the version to use
&lt;a href="https://asdf-vm.com/"&gt;asdf&lt;/a&gt;'s path. This is important when using Poetry, since
Poetry will inherit the Python version from pipx in order to create its own
virtual environments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// ~/.config/fish/config.fish 
❯ &lt;span class="nb"&gt;set&lt;/span&gt; -g PIPX_DEFAULT_PYTHON ~/.asdf/shims/python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can install Poetry using pipx.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// using pipx to install poetry globally 
❯ pipx install poetry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For information on pipx, you can also listen to
&lt;a href="https://talkpython.fm/episodes/show/371/pipx-installable-isolated-python-applications"&gt;this&lt;/a&gt;
podcast episode.&lt;/p&gt;
&lt;h1 id="3-basic-usage-in-order-to-create-a-new-directory-with-predefined-files-and"&gt;3. Basic Usage In order to create a new directory with predefined files and&lt;/h1&gt;
&lt;p&gt;project structure you can simply run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// creates new project 
❯ poetry new my_project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will be presented with a few prompts regarding your project and once
completed a new directory will be created with the below contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// example project structure 
my_project 
&amp;boxvr;&amp;boxh;&amp;boxh; pyproject.toml 
&amp;boxvr;&amp;boxh;&amp;boxh; README.rst
&amp;boxvr;&amp;boxh;&amp;boxh; my_project 
&amp;boxv;   &amp;boxur;&amp;boxh;&amp;boxh; __init__.py 
&amp;boxur;&amp;boxh;&amp;boxh; tests 
    &amp;boxvr;&amp;boxh;&amp;boxh; __init__.py 
    &amp;boxur;&amp;boxh; test_my_project.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have an existing Python project and directory structure you can navigate
to the project directory and then run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// creates poetry project &lt;span class="k"&gt;in&lt;/span&gt; existing project 
❯ poetry init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enter the details in the prompts and at the end you will notice a new file
called 'pyproject.toml' is created in the root of your new project, if there if
not one present already.&lt;/p&gt;
&lt;p&gt;To manage dependencies you can simply use the 'add', 'remove', 'install' and
'update' commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// example poetry commands &lt;span class="k"&gt;for&lt;/span&gt; managing depedencies 
❯ poetry add pprint  // Adds pprint to depedencies 
❯ poetry add -D black  // Adds black to your developer dependencies 
❯ poetry remove -D black  // Removes black 
❯ poetry update  // Updates all depedencies 
❯ poetry install // Installs all depedencies &lt;span class="k"&gt;in&lt;/span&gt; the virtual environment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Poetry also has some bonus features like exporting your dependencies to a
requirements file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// Exports all depedencies to requirements file 
❯ poetry &lt;span class="nb"&gt;export&lt;/span&gt; --without-hashes -o requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="4-my-workflow"&gt;4. My Workflow&lt;/h2&gt;
&lt;p&gt;Moving to my workflow when starting a new project, I use a combination of
Poetry and asdf to setup my project. Typically I have a 'workspace' or
'development' folder in my home directory on my local machine. Within this
directory I save store all my projects.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// contents of development folder 
❯ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/development

❯ ls -l 
drwxr-xr-x  &lt;span class="m"&gt;20&lt;/span&gt; user  staff   640B Oct &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:30 dotfiles/ 
drwxr-xr-x   &lt;span class="m"&gt;4&lt;/span&gt; user  staff   128B Aug &lt;span class="m"&gt;25&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:01 scratches/ 
drwxr-xr-x   &lt;span class="m"&gt;5&lt;/span&gt; user  staff   160B Jul &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;:36 scripts/ 
drwxr-xr-x  &lt;span class="m"&gt;14&lt;/span&gt; user  staff   448B Sep &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;:52 tests/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First let's check which Python versions we have installed using asdf.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// check available versions 
❯ asdf list python
  &lt;span class="m"&gt;3&lt;/span&gt;.11.0
 *3.11.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see from the above I have two Python versions installed, "system"
which will be the version which is managed by my OS and the OS package manager,
for example HomeBrew on MacOS and one that I previously installed with asdf,
namely 3.11.1. In this project I want to use 3.11.1 and in order to ensure I am 
using this Python version, I can set it as the global default on my system  as 
well as check the version and location of the binary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// &lt;span class="nb"&gt;set&lt;/span&gt; python version 
❯ asdf global python &lt;span class="m"&gt;3&lt;/span&gt;.11.1

❯ python -V 
Python &lt;span class="m"&gt;3&lt;/span&gt;.11.1

❯ which python 
/Users/butryan/.asdf/shims/python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have confirmed Python 3.11.1 is set as the default Python runtime we
can create our project using Poetry.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# creates new project &lt;/span&gt;
❯ poetry new my_project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now have our basic skeleton, let's change a few things.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// additional project setup 
❯ &lt;span class="nb"&gt;cd&lt;/span&gt; my_project &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git init 
❯ rm README.rst &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; touch README.md  // I prefer markdown 
❯ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'# my_project'&lt;/span&gt; &amp;gt;&amp;gt; README.md 
❯ touch my_project/src/main.py 
❯ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'import pprint as print\nprint("Poetry is great!")'&lt;/span&gt; &amp;gt;&amp;gt; my_project/src/main.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See basic a example of a 'pyproject.toml' file for a Python project on my GitHub
profile in the 'python_project' repository
&lt;a href="https://github.com/ryanleonbutler/python_project/blob/main/pyproject.toml"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You will notice there are a lot of other developer tools listed in the
dev-dependencies section of the above 'pyproject.toml' example. These are just
some additional tools which I added over time into my workflow. I will cover
them in a future post, but for your ease of reference see the links to the
respective home pages for more information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pre-commit.com/"&gt;Pre-commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/psf/black"&gt;Black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/isort"&gt;isort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/6.2.x/"&gt;pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coverage.readthedocs.io/en/6.0.2/"&gt;coverage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are now ready to run the Python project. There are two ways you can achieve
this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// &lt;span class="m"&gt;1&lt;/span&gt;. using the Poetry &lt;span class="s1"&gt;'run'&lt;/span&gt; &lt;span class="nb"&gt;command&lt;/span&gt; will run the Python version which
Poetry is managing &lt;span class="k"&gt;for&lt;/span&gt; you 
❯ poetry run python my_project/main.py

Poetry is great!

// &lt;span class="m"&gt;2&lt;/span&gt;. drop into a new shell with the Poetry Python version as the activated
virtual environment 
❯ poetry shell &lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; ❯ python my_project/main.py

Poetry is great!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note, regarding option 2. above, if you prefer that Poetry creates a virtual
environment in the root if your project, you can set the following
configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// example venv path configuration 
❯ poetry config --list

... virtualenvs.in-project &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt; ...

❯ poetry config virtualenvs.in-project &lt;span class="nb"&gt;true&lt;/span&gt;
❯ poetry config --list

... virtualenvs.in-project &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is as simple as that to get started with Poetry. I like how it has abstracted
the repetitive tasks and additional overhead added to the developer in managing
depedencies and virtual environments. I hope my article has inspired you to 
try out Poetry, it is a great tool!&lt;/p&gt;</content><category term="Productivity"></category><category term="Python"></category><category term="Tools"></category></entry></feed>